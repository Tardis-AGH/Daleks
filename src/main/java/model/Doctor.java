package model;

import javafx.scene.image.Image;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;


public class Doctor extends DynamicBoardElement {

    private static Random generator = new Random();

    public Doctor(Coordinates coordinates, Image sprite) {
        super(coordinates, sprite);
    }

    /**
     * @param move              user input
     * @param collisionElements elements for possible collision
     * @return list of actions generated by doctor movement
     */
    public List<Action> makeMove(Move move, List<BoardElement> collisionElements) {

        LinkedList<Action> actions = new LinkedList<>();

        switch (move) {
            case UP:
                getCoordinates().setY(getCoordinates().getY() - 1);
                break;
            case UPPER_RIGHT:
                getCoordinates().setY(getCoordinates().getY() - 1);
                getCoordinates().setX(getCoordinates().getX() + 1);
                break;
            case RIGHT:
                getCoordinates().setX(getCoordinates().getX() + 1);
                break;
            case LOWER_RIGHT:
                getCoordinates().setY(getCoordinates().getY() + 1);
                getCoordinates().setX(getCoordinates().getX() + 1);
                break;
            case DOWN:
                getCoordinates().setY(getCoordinates().getY() + 1);
                break;
            case LOWER_LEFT:
                getCoordinates().setY(getCoordinates().getY() + 1);
                getCoordinates().setX(getCoordinates().getX() - 1);
                break;
            case LEFT:
                getCoordinates().setX(getCoordinates().getX() - 1);
                break;
            case UPPER_LEFT:
                getCoordinates().setY(getCoordinates().getY() - 1);
                getCoordinates().setX(getCoordinates().getX() - 1);
                break;
            case TELEPORT:
                setCoordinates(getNewCoordinates(collisionElements));
                actions.add(new TeleportersChangeAction(1));
                break;
        }

        return actions;
    }

    @Override
    public List<Action> accept(DynamicBoardElement visitor) {
        return visitor.visit(this);
    }

    @Override
    public List<Action> visit(Dalek dalek) {
        List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(-1));
        return actions;
    }

    @Override
    public List<Action> visit(Heart heart) {
        List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(+1));
        actions.add(new ElementAdditionAction(this));
        return actions;
    }

    @Override
    public List<Action> visit(Doctor doctor) {
        //NOT GONNA HAPPEN AS WE IMPLEMENT 1 DOCTOR PER GAME
        return null;
    }

    @Override
    public List<Action> visit(Teleporter teleporter) {
        List<Action> actions = new ArrayList<>();
        actions.add(new TeleportersChangeAction(-1));
        return actions;
    }

    @Override
    public List<Action> visit(ScrapPile scrapPile) {
        List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(-1));
        return actions;
    }


    /**
     * Get new valid (not occupied) coordinates
     *
     * @param elements list of elements with possible collision
     * @return new coordinates
     */
    private Coordinates getNewCoordinates(List<BoardElement> elements) {

        Coordinates newCoordinates = new Coordinates(0, 0);
        do {
            newCoordinates.setX(generator.nextInt(Board.getBoardWidth()));
            newCoordinates.setY(generator.nextInt(Board.getBoardHeight()));
        }
        while (!isFieldEmpty(newCoordinates, elements) && newCoordinates.equals(getCoordinates()));
        return newCoordinates;
    }

    /**
     * Check if field determined by coordinates is not occupied by any dynamic element (dalek)
     *
     * @param coordinates coordinates to check
     * @param elements    list of elements with possible collision
     * @return true if given field is empty, false otherwise
     */
    private boolean isFieldEmpty(Coordinates coordinates, List<BoardElement> elements) {
        for (BoardElement boardElement : elements) {
            if (boardElement.getCoordinates().equals(coordinates))
                return false;
        }
        return true;
    }


}
