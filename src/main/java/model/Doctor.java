package model;

import javafx.scene.image.Image;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;


public class Doctor extends DynamicBoardElement {

    private static Random generator = new Random();

    public Doctor(Coordinates coordinates, Image sprite, int width, int height) {
        super(coordinates, sprite, width, height);
    }

    /**
     * @param move user input
     * @param dynamicBoardElements list of dynamic board elements
     * @param staticBoardElements list of static board elements
     * @return list of actions generated by doctor movement
     */
    public List<Action> makeMove(Move move, List<DynamicBoardElement> dynamicBoardElements, List<StaticBoardElement> staticBoardElements) {

        Coordinates oldCoordinates = this.getCoordinates();
        Coordinates newCoordinates = new Coordinates(oldCoordinates);
        LinkedList<Action> actions = new LinkedList<>();

        List<BoardElement>collisionelements = new LinkedList<>(dynamicBoardElements);
        collisionelements.addAll(staticBoardElements);

        switch (move) {
            case UP:
                newCoordinates.setY(oldCoordinates.getY() + 1);
                break;
            case UPPER_RIGHT:
                newCoordinates.setY(oldCoordinates.getY() + 1);
                newCoordinates.setX(oldCoordinates.getX() + 1);
                break;
            case RIGHT:
                newCoordinates.setX(oldCoordinates.getX() + 1);
                break;
            case LOWER_RIGHT:
                newCoordinates.setY(oldCoordinates.getY() - 1);
                newCoordinates.setX(oldCoordinates.getX() + 1);
                break;
            case DOWN:
                newCoordinates.setY(oldCoordinates.getY() - 1);
                break;
            case LOWER_LEFT:
                newCoordinates.setY(oldCoordinates.getY() - 1);
                newCoordinates.setX(oldCoordinates.getX() - 1);
                break;
            case LEFT:
                newCoordinates.setX(oldCoordinates.getX() - 1);
                break;
            case UPPER_LEFT:
                newCoordinates.setY(oldCoordinates.getY() + 1);
                newCoordinates.setX(oldCoordinates.getX() - 1);
                break;
            case TELEPORT:
                newCoordinates = getNewCoordinates(this.getWidth(), this.getHeight(), collisionelements);
                actions.add(new TeleportersChangeAction(1));
                break;
        }

        if (this.isFieldInBounds(newCoordinates, this.getWidth(), this.getHeight()))
            this.setCoordinates(newCoordinates);

        return actions;
    }

    @Override
    public List<Action> accept(DynamicBoardElement visitor) {
        return visitor.visit(this);
    }

    @Override
    public List<Action> visit(Dalek dalek) {
        List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(-1));
        return actions;
    }

    @Override
    public List<Action> visit(Heart heart) {
        List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(+1));
        actions.add(new ElementAdditionAction(this));
        return actions;
    }

    @Override
    public List<Action> visit(Doctor doctor) {
        //NOT GONNA HAPPEN AS WE IMPLEMENT 1 DOCTOR PER GAME
        return null;
    }

    @Override
    public List<Action> visit(Teleporter teleporter) {
        List<Action> actions = new ArrayList<>();
        actions.add(new TeleportersChangeAction(-1));
        return actions;
    }

    @Override
    public List<Action> visit(ScrapPile scrapPile) {
        List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(-1));
        return actions;
    }


    /**
     * Get new valid (not occupied) coordinates
     * @param width map width
     * @param height map height
     * @param elements list of elements with possible collision
     * @return new coordinates
     */
    private Coordinates getNewCoordinates(int width, int height, List<BoardElement> elements) {
        Coordinates newCoordinates = new Coordinates(-1, -1);
        while (!isFieldInBounds(newCoordinates, width, height) || !isFieldEmpty(newCoordinates, elements)){
            newCoordinates.setX(generator.nextInt(width));
            newCoordinates.setY(generator.nextInt(height));
        }
        return newCoordinates;
    }

    /**
     * Check if field determined by coordinates is not occupied by any dynamic element (dalek)
     * @param coordinates coordinates to check
     * @param elements list of elements with possible collision
     * @return true if given field is empty, false otherwise
     */
    private boolean isFieldEmpty(Coordinates coordinates, List<BoardElement> elements) {
        for (BoardElement boardElement : elements) {
            if (boardElement.getCoordinates().equals(coordinates))
                return false;
        }
        return true;
    }

    /**
     *Check if field determined by coordinates is in bounds of game map (bounds specified by width and height)
     * @param coordinates coordinates to check
     * @param width map width
     * @param height map haight
     * @return true if coordinates are in bounds, false otherwise
     */
    private boolean isFieldInBounds(Coordinates coordinates, int width, int height) {
        return (coordinates.getX() > width || coordinates.getY() > height || coordinates.getY() < 0 || coordinates.getX() < 0);
    }

}
