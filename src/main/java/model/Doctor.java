package model;

import javafx.scene.image.Image;

import java.util.*;


public class Doctor extends DynamicBoardElement {

    private static Random generator = new Random();

    public Doctor(Coordinates coordinates, Image sprite) {
        super(coordinates, sprite);
    }

    /**
     * @param move              user input
     * @param collisionElements elements for possible collision
     * @return list of actions generated by doctor movement
     */
    public List<Action> makeMove(Move move, Map<Coordinates, BoardElement> collisionElements) {
        LinkedList<Action> actions = new LinkedList<>();

        if (move == Move.TELEPORT) {
            setCoordinates(getNewCoordinates(collisionElements));
            actions.add(new TeleportersChangeAction(-1));
        } else {
            getCoordinates().addToX(move.getDeltaX());
            getCoordinates().addToY(move.getDeltaY());
        }
        return actions;
    }

    @Override
    public List<Action> accept(DynamicBoardElement visitor) {
        return visitor.visit(this);
    }

    @Override
    public List<Action> visit(Dalek dalek) {
        List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(-1));
        return actions;
    }

    @Override
    public List<Action> visit(Heart heart) {
        List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(+1));
        actions.add(new ElementAdditionAction(this));
        return actions;
    }

    @Override
    public List<Action> visit(Doctor doctor) {
        //NOT GOING TO HAPPEN AS WE IMPLEMENT 1 DOCTOR PER GAME
        return null;
    }

    @Override
    public List<Action> visit(Teleporter teleporter) {
        List<Action> actions = new ArrayList<>();
        actions.add(new TeleportersChangeAction(1));
        return actions;
    }

    @Override
    public List<Action> visit(ScrapPile scrapPile) {
        List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(-1));
        return actions;
    }


    /**
     * Get new valid (not occupied) coordinates
     *
     * @param elements list of elements with possible collision
     * @return new coordinates
     */
    private Coordinates getNewCoordinates(Map<Coordinates, BoardElement> elements) {

        Coordinates newCoordinates = new Coordinates(0, 0);
        do {
            newCoordinates.setX(generator.nextInt(Board.getBoardWidth()));
            newCoordinates.setY(generator.nextInt(Board.getBoardHeight()));
        }
        while (elements.containsKey(newCoordinates) || newCoordinates.equals(getCoordinates()));
        return newCoordinates;
    }
}
