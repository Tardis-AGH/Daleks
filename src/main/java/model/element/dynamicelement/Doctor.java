package model.element.dynamicelement;

import java.util.LinkedList;
import java.util.List;
import model.action.Action;
import model.action.ElementDeletionAction;
import model.action.LivesChangeAction;
import model.action.TeleportationAction;
import model.action.TeleportersChangeAction;
import model.board.Coordinates;
import model.board.Move;
import model.element.DynamicBoardElement;
import model.element.staticelement.Heart;
import model.element.staticelement.ScrapPile;
import model.element.staticelement.Teleporter;
import model.game.InteractionResult;

/**
 * The type Doctor.
 */
public class Doctor extends DynamicBoardElement {

    private static String SPRITE_PATH = "images/doctor/doctor.png";

    /**
     * Instantiates a new Doctor.
     *
     * @param coordinates the coordinates
     */
    public Doctor(Coordinates coordinates) {
        super(coordinates);
    }

    private static void setSpritePath(String spritePath) {
        SPRITE_PATH = spritePath;
    }

    /**
     * Make move list.
     *
     * @param move user input
     *
     * @return list of actions generated by doctor movement
     */
    public List<Action> makeMove(Move move) {
        final LinkedList<Action> actions = new LinkedList<>();
        if (move == Move.TELEPORT) {
            actions.add(new TeleportationAction());
        } else {
            setCoordinates(getCoordinates().getUpdated(move));
        }
        return actions;
    }

    @Override
    public InteractionResult accept(DynamicBoardElement visitor) {
        return visitor.visit(this);
    }

    @Override
    public InteractionResult visit(Dalek dalek) {
        // the Doctor is processed before the Daleks
        return null;
    }

    @Override
    public InteractionResult visit(Heart heart) {
        final InteractionResult interactionResult = new InteractionResult(this);
        interactionResult.addAction(new LivesChangeAction(+1));
        interactionResult.addAction(new ElementDeletionAction(heart));
        return interactionResult;
    }

    @Override
    public InteractionResult visit(Doctor doctor) {
        // only one Doctor per game
        return null;
    }

    @Override
    public InteractionResult visit(Teleporter teleporter) {
        final InteractionResult interactionResult = new InteractionResult(this);
        interactionResult.addAction(new TeleportersChangeAction(1));
        interactionResult.addAction(new ElementDeletionAction(teleporter));
        return interactionResult;
    }

    @Override
    public InteractionResult visit(ScrapPile scrapPile) {
        final InteractionResult interactionResult = new InteractionResult(scrapPile);
        interactionResult.addAction(new LivesChangeAction(-1));
        return interactionResult;
    }

    public String getImagePath() {
        return SPRITE_PATH;
    }
}
