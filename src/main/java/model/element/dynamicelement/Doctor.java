package model.element.dynamicelement;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javafx.scene.image.Image;
import model.Board;
import model.Coordinates;
import model.Move;
import model.action.Action;
import model.action.ElementAdditionAction;
import model.action.LivesChangeAction;
import model.action.TeleportersChangeAction;
import model.element.BoardElement;
import model.element.DynamicBoardElement;
import model.element.staticelement.Heart;
import model.element.staticelement.ScrapPile;
import model.element.staticelement.Teleporter;

/**
 * The type Doctor.
 */
public class Doctor extends DynamicBoardElement {

    private static Random generator = new Random();

    /**
     * Instantiates a new Doctor.
     *
     * @param coordinates the coordinates
     * @param sprite the sprite
     */
    public Doctor(Coordinates coordinates, Image sprite) {
        super(coordinates, sprite);
    }

    /**
     * Instantiates a new Doctor.
     *
     * @param coordinates the coordinates
     */
    public Doctor(Coordinates coordinates) {
        super(coordinates);
    }

    /**
     * Make move list.
     *
     * @param move user input
     * @param collisionElements elements for possible collision
     *
     * @return list of actions generated by doctor movement
     */
    public List<Action> makeMove(Move move, Map<Coordinates, BoardElement> collisionElements) {
        final LinkedList<Action> actions = new LinkedList<>();

        if (move == Move.TELEPORT) {
            setCoordinates(getNewCoordinates(collisionElements));
            actions.add(new TeleportersChangeAction(-1));
        } else {
            getCoordinates().addToX(move.getDeltaX());
            getCoordinates().addToY(move.getDeltaY());
        }
        return actions;
    }

    /**
     * Get new valid (not occupied) coordinates.
     *
     * @param elements list of elements with possible collision
     *
     * @return new coordinates
     */
    private Coordinates getNewCoordinates(Map<Coordinates, BoardElement> elements) {

        final Coordinates newCoordinates = new Coordinates(0, 0);
        do {
            newCoordinates.setX(generator.nextInt(Board.getBoardWidth()));
            newCoordinates.setY(generator.nextInt(Board.getBoardHeight()));
        } while (elements.containsKey(newCoordinates) || newCoordinates.equals(getCoordinates()));
        return newCoordinates;
    }

    @Override
    public List<Action> accept(DynamicBoardElement visitor) {
        return visitor.visit(this);
    }

    @Override
    public List<Action> visit(Dalek dalek) {
        final List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(-1));
        return actions;
    }

    @Override
    public List<Action> visit(Heart heart) {
        final List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(+1));
        actions.add(new ElementAdditionAction(this));
        return actions;
    }

    @Override
    public List<Action> visit(Doctor doctor) {
        // NOT GOING TO HAPPEN AS WE IMPLEMENT 1 DOCTOR PER GAME
        return null;
    }

    @Override
    public List<Action> visit(Teleporter teleporter) {
        final List<Action> actions = new ArrayList<>();
        actions.add(new TeleportersChangeAction(1));
        return actions;
    }

    @Override
    public List<Action> visit(ScrapPile scrapPile) {
        final List<Action> actions = new ArrayList<>();
        actions.add(new LivesChangeAction(-1));
        return actions;
    }
}
